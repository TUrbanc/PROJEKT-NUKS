=======================================
API DOKUMENTACIJA
=======================================

API dokumentacija, razdeljena po funkcionalnosti:

Osnovni URL: http://localhost:3000

1. Avtentikacija in seja

POST /registracija

Registrira novega uporabnika.

Body:

uporabniskoIme: string – uporabniško ime
geslo: string – geslo
potrdiGeslo`: string – ponovitev gesla

Odgovori:

302 Redirect na / ob uspehu
400 JSON { errors: { uporabniskoIme: ... } } ob napakah
500 Napaka na strežniku

---

POST /prijava

Prijavi obstoječega uporabnika.

Body:

uporabniskoIme: string
geslo: string

Odgovori:

302 Redirect na / ob uspehu
302 Redirect na /prijava.html?error=1 ob napaki

---

POST /preveriIme

Preveri, ali je uporabniško ime že zasedeno.

Body:
json
{
  "uporabniskoIme": "ime"
}

Odgovor:

json
{ "available": true }

---

2. Datoteke in mape

GET /datoteke

Vrne seznam vseh datotek in map v shranjevalni mapi.

Odgovor:

json
[
  {
    "name": "file.txt",
    "size": 12345,
    "createdAt": 1680000000000,
    "isDirectory": false
  },
]

---

DELETE /izbrisi/:ime

Izbriše datoteko ali mapo z imenom :ime.

Parametri:

ime: string – ime datoteke ali mape (URL encoded)

Odgovori:

204 Uspešno
500 Napaka

---

POST /naloziDatoteko

Naloži eno ali več datotek v glavno mapo.

Form-Data:

datoteka: file\[]

Odgovor:

204 Uspešno

---

POST /naloziMapo

Naloži datoteke v podmapo.

Form-Data:

mapa: string – ime mape
datoteka: file\[]

Odgovor:

204 Uspešno

---

GET /prenesiMapo/:imePreneseneMape

Prenese mapo kot .zip datoteko.

Parametri:

imePreneseneMape: string

Odgovor:

ZIP prenos

---

GET /velikostMape/:imeMape

Izračuna velikost mape.

Parametri:

imeMape: string (URL encoded)

Odgovor:

json
{ "velikost": 123456 }

---

3. Statika in zaščita

GET /

GET /datoteke.html

Prikaže zaščiteno stran z datotekami (potrebuje prijavo).

GET /zasciteneDatoteke/

Statične zaščitene vsebine (potrebuje prijavo).

GET /nalozeneDatoteke/

Statične vsebine (nalaganje in prikaz nalaganih datotek, potrebuje prijavo).

GET /prijava.html

Stran za prijavo (javna)

---

4. Sejni middleware

Vsi zaščiteni endpointi uporabljajo preveriPrijavo, ki:
- preusmeri na /prijava.html za HTML zahteve
- vrne 401 JSON napako za neavtorizirane AJAX klice

---

Konfiguracija baze

Povezava do MySQL baze:

js
host: process.env.DB_HOST || 'mysql' || 'localhost'
user: process.env.DB_USER || 'root'
password: process.env.DB_PASSWORD || 'geslo'
database: process.env.DB_NAME || 'SpletnaStranZaDatoteke'

V primeru napake poskuša znova do največ 10-krat.

---



API dokumentacija kam - kaj se vrne

1. Preveri uporabniško ime
---------------------------------------
Frontend klic (prijavaInRegistracija/js/registracija.js):
    fetch('/preveriIme', ...)

Backend odziv (app.js):
    app.post('/preveriIme', async (req, res) => {
        const { uporabniskoIme } = req.body;
        const [users] = await db.promise().query(
            'SELECT * FROM uporabniki WHERE ime = ?',
            [uporabniskoIme]
        );
        res.json({ available: users.length === 0 });
    });

2. Izbriši datoteko
---------------------------------------
Frontend klic (zasciteneDatoteke/js/izbrisi.js):
    fetch(`/izbrisi/${encodeURIComponent(filename)}`, ...)

Backend odziv (app.js):
    app.delete('/izbrisi/:ime', (req, res) => {
        const ime = req.params.ime;
        fs.unlinkSync(pot);
        res.json({ message: 'Datoteka izbrisana' });
    });

3. Naloži eno datoteko
---------------------------------------
Frontend klic (zasciteneDatoteke/js/nalozi.js):
    fetch('/naloziDatoteko', ...)

Backend odziv (app.js):
    app.post('/naloziDatoteko', upload.single('datoteka'), (req, res) => {
        res.json({ message: 'Datoteka uspešno naložena' });
    });

4. Naloži mapo (več datotek)
---------------------------------------
Frontend klic (zasciteneDatoteke/js/nalozi.js):
    fetch('/naloziMapo', ...)

Backend odziv (app.js):
    app.post('/naloziMapo', upload.array('datoteke'), (req, res) => {
        res.json({ message: 'Mapa uspešno naložena' });
    });

5. Pridobi seznam datotek
---------------------------------------
Frontend klic (zasciteneDatoteke/js/seznamDatotek.js):
    fetch('/datoteke')

Backend odziv (app.js):
    app.get('/datoteke', (req, res) => {
        const files = fs.readdirSync(shranjevanjeMapa);
        res.json(files);
    });

6. Izračunaj velikost mape
---------------------------------------
Frontend klic (zasciteneDatoteke/js/seznamDatotek.js):
    fetch(`/velikostMape/${encodeURIComponent(imeMape)}`)

Backend odziv (app.js):
    app.get('/velikostMape/:imeMape', (req, res) => {
        res.json({ velikost: formatiranaVelikost });
    });

7. Registracija uporabnika
---------------------------------------
Frontend klic (prijavaInRegistracija/registracija.html):
    <form id="registracija" action="/registracija" method="POST">

Backend odziv (app.js):
    app.post('/registracija', async (req, res) => {
        const { uporabniskoIme, geslo, potrdiGeslo } = req.body;
        res.json({ message: 'Uspešna registracija' });
    });

8. Prijava uporabnika
---------------------------------------
Frontend klic (prijavaInRegistracija/prijava.html):
    <form id="prijava" action="/prijava" method="POST">

Backend odziv (app.js):
    app.post('/prijava', async (req, res) => {
        const { uporabniskoIme, geslo } = req.body;
        res.json({ message: 'Prijava uspešna' });
    });

